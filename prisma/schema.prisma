// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model User{
  user_id String @id@default(uuid())
  name String
  email String @unique
  password String
  profile_picture String?
  phone String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  boards Board[]
  saved_board SavedBoard[] 

  follower Follow[] @relation(name: "UserFollowers")
  followed Follow[] @relation(name: "UserFollowing")


}
model Board{
  Board_id String @id@default(uuid())
  image_id String @unique
  name String 
  author_id String 
  description String
  price Decimal 
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  saved_by SavedBoard[]

  author User @relation(fields: [author_id],references: [user_id]) 

  image BoardImage @relation(fields: [image_id],references: [image_id],onDelete: Cascade,onUpdate: Cascade)
}
model BoardImage{
  image_id String @id @default(uuid())
  image_url String 
  dominantColor String 
  width Float  
  heigth Float
  board Board?
}
model SavedBoard{
  user_id String 
  board_id String

  user User @relation(fields: [user_id],references: [user_id])
  board Board@relation(fields: [board_id],references: [Board_id],onDelete: Cascade,onUpdate: Cascade)

  @@id([user_id,board_id])
}

model Follow{
  follower_id String
  followed_id String
  created_at DateTime @default(now())
  follower User @relation(name: "UserFollowers", fields: [follower_id], references: [user_id])
  followed User @relation(name: "UserFollowing", fields: [followed_id], references: [user_id])
  @@id([follower_id,followed_id])
}